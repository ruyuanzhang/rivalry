function [token, status] = sdmAuth(action, sdmInstance)
% [token, status] = sdmAuth([action='create'], [sdmInstance='sni_sdm'])
% 
%  Get an authorization token for SDM download/upload. 
% 
%  The token is generated by running python code (see url below). The code
%  will open a browser where you will be prompted to enter your google
%  credentials. The token will be saved in the user's home directory.
% 
%  NOTE: The python code requires that:
%       1) Start matlab from a terminal (to inheret your ENV) or
%          otherwise properly set your ENV (PATH) to include paths to
%          python & required libs.
%       2) Have certain python libs installed and on your path. 
%          Those libs are:
%               oauth2client, httplib2, cStringIO, contextlib.
%       3) Have access to port 9000 to open a browser window/tab. By
%          default this should work just fine.
% 
%  INPUTS: 
%       action - Token action to perform.
%                   'create'  - [default] generate a new token. This will
%                               refresh the token if one exists.
%                   'refresh' - refresh an existing token.
%                   'revoke'  - revoke an existing token. For security this
%                               should be done by the user when they are 
%                               no longer in need of the token. Each token
%                               and sdmAuth profile will be deleted.
% 
%       sdmInstance - String denoting the sdm instance to authorize
%                     against. Information about the instance is saved
%                     within a mat file (e.g. sdmAuth.mat) and loaded when
%                     chosen. Default='sni_sdm' (sni-sdm.stanford.edu). New
%                     instances will have to be added to this repo in the
%                     correct format, with the client_id and client_secret
%                     stored as vars in the mat file.
%       
%       * Note that for default usage no inputs are required.
% 
%  OUTPUTS:
%       token   - string containing the token
% 
%       status  - boolean where 0=success and >0 denotes failure.
%
%  Python code url: https://github.com/scitran/scripts/blob/master/oauth2cli.py
% 
%  Example:
%    LMP to check:  token = sdmAuth('create','sni-sdm');
% 
% (C) Stanford VISTA Lab, 2016 - LMP
% 
% 

%% Check inputs

% By default we will create a token
if notDefined('action')
    action = 'create';
end

% We default to sni_sdm (for now)
if notDefined('sdm_instance');
    sdmInstance = 'sni_sdm';
end


%% Load or create local client_auth file

% Base directory to store user-specific files
sdmDir = fullfile(getenv('HOME'), 'sdm');
if ~exist(sdmDir,'dir') 
    mkdir(sdmDir); 
end

localAuthFile = fullfile(sdmDir, '.sdmAuth.mat');
% If the file does not exist, then copy it from vistasoft, which is on the
% path.
if ~exist(localAuthFile, 'file')
    copyfile(which('sdmAuth.mat'), localAuthFile)
end


%% Set path to token file and initilize token
tokenFile = fullfile(sdmDir, '.sdm_token');
token = '';


%% Load instance and client information (used in python command)

load(localAuthFile); % loads sdm

% Check for client/instance info in the localAuthFile 
% Prompt to add it if not found, then save it for next time.
if ~isfield(sdm, sdmInstance) %#ok<NODEF>
    prompt = sprintf('\n%s does not exist in your local auth file. \n Would you like to enter it? (y/n): ', sdmInstance);
    response = input(prompt,'s');    
    if lower(response) == 'y'
        client_id     = input('Please enter the client_id: ', 's');
        client_secret = input('Please enter the client_secret: ', 's');
        % Check that fields are not blank
        if notDefined('client_id') || notDefined('client_secret');
            disp('One more more keys is empty, aborting');
            return
        else
            sdm.(sdmInstance).client_id = client_id;
            sdm.(sdmInstance).client_secret = client_secret;
            save(localAuthFile, 'sdm');
            disp('Instance ID and Secret saved.');
        end
    else
        disp('Aborting');
        return
    end 
end

% Set the values
client_secret = sdm.(sdmInstance).client_secret;
client_id = sdm.(sdmInstance).client_id;

% Check for client secret
if notDefined('client_secret');
    prompt = (sprintf('\nSDM AUTH: Connecting to "%s"...\nPlease enter the client_secret: ', sdmInstance));
    client_secret = input(prompt, 's');
    if notDefined('client_secret')
        disp('Aborting')
        return
    else
        % Save the value to sdm and save to file for next time
        sdm.(sdmInstance).client_secret = client_secret;
        save(localAuthFile, 'sdm');
        disp('Client Secret saved.');
    end
end


%% Download python code from GitHub 

pyCode = fullfile(sdmDir, 'oauth2cli.py');

% Dowload the script (from github master)
urlwrite('https://raw.githubusercontent.com/scitran/scripts/master/oauth2cli.py', pyCode);

% Make the code executable
fileattrib(pyCode, '+x');


%% Switch on action

switch lower(action)
    
    % Create a new token or refresh an existing one
    case {'create', 'refresh'}
        if exist(tokenFile,'file') 
            subFunction = 'refresh';
            cmd = ['python ', pyCode, ' --filename ', tokenFile , ' ', subFunction];
        else
            subFunction = 'create';
            cmd = ['python ', pyCode, ' --filename ', tokenFile , ' ', subFunction, ' --auth_host_port 9000 --client-secret ',  client_secret, ' --client-id ', client_id];
        end
        
        % Execute the call to python
        [status, token] = system(cmd);
    
    % Revoke an existing token
    case {'revoke', 'delete'}
        if exist(tokenFile, 'file')
            cmd = ['python ', pyCode, ' --filename ', tokenFile , ' ', action];
            % Execute the call to python
            [status, token] = system(cmd);
            if status == 0
                delete(tokenFile);
                delete(localAuthFile);
                return
            else
                error(token);
            end
        else
            warning('No token could be found to revoke!');
            status = 1;
            return
        end
    
    % Not a recognized action
    otherwise 
        error('Action not recognized!');
end


%% Check for errors and format token before returning

if (~isempty(strfind(lower(token), 'error')) || status > 0) 
    status = 1;
    warning('Check that you have python dependencies installed and on your path!');
    error(token);
end

% Remove trailing spaces from token string before returning
token = strtrim(token);

return
